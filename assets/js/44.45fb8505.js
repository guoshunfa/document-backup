(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{415:function(e,a,r){"use strict";r.r(a);var t=r(44),l=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"serializefilter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#serializefilter"}},[e._v("#")]),e._v(" SerializeFilter")]),e._v(" "),r("p",[e._v("​\tfastjson通过SerializeFilter编程扩展的方式定制序列化fastjson支持以下SerializeFilter用于不同常景的定制序列化：")]),e._v(" "),r("ul",[r("li",[e._v("PropertyFilter 根据PropertyName和PropertyValue来判断是否序列化,接口定义如下：")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\n/**\n * @author wenshao[szujobs@hotmail.com]\n */\npublic interface PropertyFilter extends SerializeFilter {\n\n    /**\n     * @param object the owner of the property\n     * @param name the name of the property\n     * @param value the value of the property\n     * @return true if the property will be included, false if to be filtered out\n    * 根据 属性的name与value判断是否进行序列化\n     */\n    boolean apply(Object object, String name, Object value);\n}\n")])])]),r("ul",[r("li",[e._v("PropertyPreFilter根据PropertyName判断是否序列化")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\npublic interface PropertyPreFilter extends SerializeFilter {\n\n//根据 object与name判断是否进行序列化\n    boolean apply(JSONSerializer serializer, Object object, String name);\n}\n")])])]),r("ul",[r("li",[e._v("NameFilter 序列化时修改Key")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\npublic interface NameFilter extends SerializeFilter {\n//根据 name与value的值，返回json字段key的值\n    String process(Object object, String name, Object value);\n}\n")])])]),r("ul",[r("li",[e._v("ValueFilter 序列化时修改Value")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\npublic interface ValueFilter extends SerializeFilter {\n  //根据name与value定制输出json的value\n    Object process(Object object, String name, Object value);\n}\n")])])]),r("ul",[r("li",[e._v("BeforeFilter 在序列化对象的所有属性之前执行某些操作")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\npublic abstract class BeforeFilter implements SerializeFilter {\n\n    private static final ThreadLocal<JSONSerializer> serializerLocal = new ThreadLocal<JSONSerializer>();\n    private static final ThreadLocal<Character>      seperatorLocal  = new ThreadLocal<Character>();\n\n    private final static Character                   COMMA           = Character.valueOf(',');\n\n    final char writeBefore(JSONSerializer serializer, Object object, char seperator) {\n        serializerLocal.set(serializer);\n        seperatorLocal.set(seperator);\n        writeBefore(object);\n        serializerLocal.set(null);\n        return seperatorLocal.get();\n    }\n\n    protected final void writeKeyValue(String key, Object value) {\n        JSONSerializer serializer = serializerLocal.get();\n        char seperator = seperatorLocal.get();\n        serializer.writeKeyValue(seperator, key, value);\n        if (seperator != ',') {\n            seperatorLocal.set(COMMA);\n        }\n    }\n//需要实现的方法，在实际实现中可以调用writeKeyValue增加json的内容\n    public abstract void writeBefore(Object object);\n}\n")])])]),r("ul",[r("li",[e._v("AfterFilter 在序列化对象的所有属性之后执行某些操作")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\n/**\n * @since 1.1.35\n */\npublic abstract class AfterFilter implements SerializeFilter {\n\n    private static final ThreadLocal<JSONSerializer> serializerLocal = new ThreadLocal<JSONSerializer>();\n    private static final ThreadLocal<Character>      seperatorLocal  = new ThreadLocal<Character>();\n\n    private final static Character                   COMMA           = Character.valueOf(',');\n\n    final char writeAfter(JSONSerializer serializer, Object object, char seperator) {\n        serializerLocal.set(serializer);\n        seperatorLocal.set(seperator);\n        writeAfter(object);\n        serializerLocal.set(null);\n        return seperatorLocal.get();\n    }\n\n    protected final void writeKeyValue(String key, Object value) {\n        JSONSerializer serializer = serializerLocal.get();\n        char seperator = seperatorLocal.get();\n        serializer.writeKeyValue(seperator, key, value);\n        if (seperator != ',') {\n            seperatorLocal.set(COMMA);\n        }\n    }\n//子类需要实现的方法，实际使用的时候可以调用writeKeyValue增加内容\n    public abstract void writeAfter(Object object);\n}\n")])])]),r("ul",[r("li",[e._v("LabelFilter根据 JsonField配置的label来判断是否进行输出")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("package com.alibaba.fastjson.serializer;\n\n//根据 JsonField配置的label来判断是否进行输出\npublic interface LabelFilter extends SerializeFilter {\n    boolean apply(String label);\n}\n")])])])])}),[],!1,null,null,null);a.default=l.exports}}]);