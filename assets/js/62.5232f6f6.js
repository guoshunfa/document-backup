(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{436:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),s("blockquote",[s("p",[t._v("在 JDK 1.4之前，开发人员经常使用注释来记录关于程序正确性的假设。然而，注释作为测试和调试假设的机制是无用的。编译器忽略注释，因此无法使用它们进行 bug 检测。开发人员在更改代码时也经常不更新注释。")]),t._v(" "),s("p",[t._v("在 JDK 1.4中，断言被引入作为测试和调试代码假设的新机制。实质上，断言是在运行时执行的可编译实体，假设你已经为程序测试启用了它们。可以通过编写断言来通知 bug 发生的地方，这样可以大大减少调试失败程序的时间。")])]),t._v(" "),s("h2",{attrs:{id:"编写断言的表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写断言的表达式"}},[t._v("#")]),t._v(" 编写断言的表达式")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BooleanExpr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果 BooleanExpr 的计算结果为 true，则不会发生任何事情，并继续执行。但是，如果表达式计算结果为 false，那么将抛出 AssertionError")]),t._v(" "),s("h3",{attrs:{id:"举个例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[t._v("#")]),t._v(" 举个例子")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"运行后没有反应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行后没有反应"}},[t._v("#")]),t._v(" 运行后没有反应??")]),t._v(" "),s("p",[s("code",[t._v("有的小伙伴发现自己的IDE并没有抛出Error 这是因为没有显示开启,启用断言")]),t._v(" 开启方法: vm options 加入 -ea")]),t._v(" "),s("p",[t._v("此时我们运行项目 发现抛出了异常")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" in thread "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("AssertionError")]),t._v("\n    at "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scratch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scratch_4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"希望获得更多信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#希望获得更多信息"}},[t._v("#")]),t._v(" 希望获得更多信息?")]),t._v(" "),s("p",[t._v("此时我们已经知道了断言的基本用法 但是抛出Error后我们并不知道是什么问题导致的 还需要去翻看代码找到报错的地方, 如果我们希望获得更多有用的信息 我们可以这样修改Assert语句:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("assert BooleanExpr : expr;\n")])])]),s("p",[t._v("expr 是任何可以返回值的表达式(包括方法调用)但是不能调用具有 void 返回类型的方法。一个有用的表达式是一个字符串，用它来描述失败的原因")]),t._v(" "),s("h3",{attrs:{id:"举个例子-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举个例子-2"}},[t._v("#")]),t._v(" 举个例子")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a < 100"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("运行:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Exception in thread "main" java.lang.AssertionError: a < 100\n    at Scratch.main(scratch_4.java:5)\n')])])]),s("p",[t._v("无论哪个例子，在不使用-ea (启用断言)选项的情况下运行都不会产生输出。当断言未启用时，它们不会执行，尽管它们仍然存在于类文件中。")]),t._v(" "),s("h2",{attrs:{id:"前置条件和后置条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置条件和后置条件"}},[t._v("#")]),t._v(" 前置条件和后置条件")]),t._v(" "),s("p",[t._v("前置条件: 是在执行某些代码之前必须求值为 true 的条件")]),t._v(" "),s("p",[t._v("后置条件: 是在执行某些代码后必须求值为 true 的条件")]),t._v(" "),s("h3",{attrs:{id:"前置条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置条件"}},[t._v("#")]),t._v(" 前置条件")]),t._v(" "),s("p",[t._v("前置条件检查:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nclass PNG\n    {\n        /**\n         *  Create a PNG instance, read specified PNG file, and decode\n         *  it into suitable structures.\n         *\n         *  @param filespec path and name of PNG file to read\n         *\n         *  @throws NullPointerException when <code>filespec</code> is\n         *          <code>null</code>\n         */\n        PNG(String filespec) throws IOException\n        {\n            //在非私有构造方法中 使用前置条件\n            if (filespec == null)\n                throw new NullPointerException("filespec is null");\n            try (FileInputStream fis = new FileInputStream(filespec))\n            {\n                readHeader(fis);\n            }\n        }\n\n        private void readHeader(InputStream is) throws IOException\n        {  \n                //在私有方法中使用前置条件检查\n            assert is != null : "null passed to is";\n        }\n    }\n\n    class Scratch\n    {\n        public static void main(String[] args) throws IOException\n        {\n            PNG png = new PNG((args.length == 0) ? null : args[0]);\n        }\n    }\n')])])]),s("h3",{attrs:{id:"后置条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后置条件"}},[t._v("#")]),t._v(" 后置条件")]),t._v(" "),s("p",[t._v("后置条件检查:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class AssertDemo\n{\n   public static void main(String[] args)\n   {\n      int[] array = { 20, 91, -6, 16, 0, 7, 51, 42, 3, 1 };\n      sort(array);\n      for (int element: array)\n         System.out.printf("%d ", element);\n      System.out.println();\n   }\n\n   private static boolean isSorted(int[] x)\n   {\n      for (int i = 0; i < x.length - 1; i++)\n         if (x[i] > x[i + 1])\n            return false;\n      return true;\n   }\n\n   private static void sort(int[] x)\n   {\n      int j, a;\n      // For all integer values except the leftmost value ...\n      for (int i = 1; i < x.length; i++)\n      {\n         // Get integer value a.\n         a = x[i];\n         // Get index of a. This is the initial insert position, which is\n         // used if a is larger than all values in the sorted section.\n         j = i;\n         // While values exist to the left of a\'s insert position and the\n         // value immediately to the left of that insert position is\n         // numerically greater than a\'s value ...\n         while (j > 0 && x[j - 1] > a)\n         {\n            // Shift left value -- x[j - 1] -- one position to its right --\n            // x[j].\n            x[j] = x[j - 1];\n            // Update insert position to shifted value\'s original position\n            // (one position to the left).\n            j--;\n         }\n         // Insert a at insert position (which is either the initial insert\n         // position or the final insert position), where a is greater than\n         // or equal to all values to its left.\n         x[j] = a;\n      }\n      //在 sort ()返回给它的调用者之前，我使用 assert 检查 x 被排序的后置条件。\n      assert isSorted(x): "array not sorted";\n   }\n}\n')])])]),s("h2",{attrs:{id:"陷阱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱"}},[t._v("#")]),t._v(" 陷阱")]),t._v(" "),s("p",[t._v("assert关键字用法简单，但是使用assert往往会让你陷入越来越深的陷阱中。应避免使用。笔者经过研究，总结了以下原因：")]),t._v(" "),s("blockquote",[s("p",[t._v("1、 assert关键字需要在运行时候显式开启才能生效，否则你的断言就没有任何意义。而现在主流的Java IDE工具默认都没有开启-ea断言检查功能。这就意味着你如果使用IDE工具编码，调试运行时候会有一定的麻烦。并且，对于Java Web应用，程序代码都是部署在容器里面，你没法直接去控制程序的运行，如果一定要开启-ea的开关，则需要更改Web容器的运行配置参数。这对程序的移 植和部署都带来很大的不便。")])]),t._v(" "),s("blockquote",[s("p",[t._v("2、用assert代替if是陷阱之二。assert的判断和if语句差不多，但两者的作用有着本质的区别：assert关键字本意上是为测试 调试程序时使用的，但如果不小心用assert来控制了程序的业务流程，那在测试调试结束后去掉assert关键字就意味着修改了程序的正常的逻辑。")])]),t._v(" "),s("blockquote",[s("p",[t._v("3、assert断言失败将面临程序的退出。这在一个生产环境下的应用是绝不能容忍的。一般都是通过异常处理来解决程序中潜在的错误。但是使用断言就很危险，一旦失败系统就挂了。")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("assert既然是为了调试测试程序用，不在正式生产环境下用，那应该考虑更好的测试JUint来代替其做用，JUint相对assert关键的所提供的功能是有过之而无不及。当然完全可以通过IDE debug来进行调试测试")]),t._v(" "),s("p",[t._v("因此，应当避免在Java中使用assert关键字，除非哪一天Java默认支持开启-ea的开关，这时候可以考虑。对比一下，assert能给你带来多少好处，多少麻烦，这是我们选择是否使用的的原则,读者可以自行取舍.")])])}),[],!1,null,null,null);a.default=n.exports}}]);